// Generated by CoffeeScript 2.7.0
(function() {
  var API_KEY, WeatherItemCollection, WeatherItemDataModel, collectionObj, currentTempUnit, fetchDataButton, fetchDataButtonHandler, getWeatherDataForId, loadCityList, main, modelObj, newview, obj, populateSelection, unitSelectorButton, view;

  API_KEY = "3edd04b4790e8483645f24667cd79d87";

  loadCityList = async(async function() {
    var data, error, response;
    try {
      response = (await fetch("./current.city.list.json"));
      data = (await response.json());
      return data;
    } catch (error1) {
      error = error1;
      return console.log("error fetching json: ", error);
    }
  });

  populateSelection = function(data, selectId) {
    var city, i, len, option, results, select;
    select = document.getElementById(selectId);
    results = [];
    for (i = 0, len = data.length; i < len; i++) {
      city = data[i];
      option = document.createElement("option");
      option.text = city.name;
      option.value = city.id;
      results.push(select.appendChild(option));
    }
    return results;
  };

  main = async(async function() {
    var data;
    data = (await loadCityList());
    populateSelection(data.slice(1, 10), "city-selector");
    return $("#city-selector").chosen();
  });

  fetchDataButton = document.getElementById("fetchDataButton");

  fetchDataButtonHandler = function() {
    var selectElement;
    selectElement = document.getElementById("city-selector");
    console.log("nextButton:", selectElement.value);
    if (selectElement.value) {
      return getWeatherDataForId(selectElement.value).then(function(data) {
        collectionObj.add(new WeatherItemDataModel(data));
        return console.log(data);
      });
    }
  };

  getWeatherDataForId = function(id) {
    return fetch("https://api.openweathermap.org/data/2.5/weather?id=" + id + "&appid=" + API_KEY).then(function(response) {
      return response.json();
    }).then(function(data) {
      console.log("next:", data);
      return {
        id: data.id,
        name: data.name,
        temperature: data.main.temp
      };
    });
  };

  unitSelectorButton = document.getElementById("unitSelectorButton");

  currentTempUnit = "K";

  unitSelectorButton.addEventListener("click", function() {
    if (currentTempUnit === "K") {
      unitSelectorButton.textContent = "C";
      currentTempUnit = "C";
    } else if (currentTempUnit === "C") {
      unitSelectorButton.textContent = "F";
      currentTempUnit = "F";
    } else if (currentTempUnit === "F") {
      unitSelectorButton.textContent = "K";
      currentTempUnit = "K";
    }
    return newview.render();
  });

  WeatherItemDataModel = Backbone.Model.extend({
    defaults: {
      id: -1,
      name: "placeholder",
      temperature: -100
    }
  });

  WeatherItemCollection = Backbone.Collection.extend({
    model: WeatherItemDataModel
  });

  collectionObj = new WeatherItemCollection();

  obj = new WeatherItemDataModel({
    id: 321,
    name: "keshav",
    temperature: 89
  });

  collectionObj.add(obj);

  view = Backbone.View.extend({
    initialize: function() {
      this.listenTo(this.collection, "add", this.render);
      return this.listenTo(this.collection, "destroy", this.render);
    },
    template: _.template($("#item-template").html()),
    render: function() {
      var self;
      console.log("render");
      this.$el.empty();
      self = this;
      this.collection.each(function(model) {
        var itemHtml, temperature;
        temperature = model.get('temperature');
        if (currentTempUnit === 'C') {
          temperature -= 273.15;
        } else if (currentTempUnit === 'F') {
          temperature = (temperature - 273.15) * 9 / 5 + 32;
        }
        itemHtml = self.template({
          id: model.get('id'),
          name: model.get('name'),
          temperature: temperature.toFixed(2),
          unit: currentTempUnit
        });
        return self.$el.append(itemHtml);
      });
      return this;
    },
    events: {
      "click .updateButton": "updateData",
      "click .deleteButton": "deleteWeatherItem"
    },
    updateData: function(event) {
      var itemId, modelToUpdate;
      itemId = $(event.currentTarget).data('id');
      modelToUpdate = this.collection.get(itemId);
      return getWeatherDataForId(itemId).then((updatedData) => {
        modelToUpdate.set('temperature', updatedData.temperature);
        return this.render();
      }).catch((error) => {
        return console.error('Error updating weather data:', error);
      });
    },
    deleteWeatherItem: function(event) {
      var itemId, modelToDelete;
      console.log("deleting");
      itemId = $(event.currentTarget).data('id');
      modelToDelete = this.collection.get(itemId);
      console.log(event.currentTarget);
      if (modelToDelete) {
        modelToDelete.destroy();
      }
      return this.render();
    }
  });

  modelObj = new WeatherItemDataModel();

  newview = new view({
    el: weatherList,
    collection: collectionObj
  });

  newview.render();

  Backbone.sync = function(method, model, success, error) {
    return success.success();
  };

}).call(this);
